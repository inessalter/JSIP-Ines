Async practice
--------------

Note: you should not work on this exercise until after the
Introduction to Async talk.

Async can be tricky, even for seasoned OCaml developers! You'll be
encountering lots of new concepts and libraries in this exercise, so
do not hesitate to grab a TA if you have any questions.

# Part 1

First, let's take a look at snake/src/run.ml. We define a hand-crafted
`every` function to run a callback at a given frequency, but the
`Clock_ns` module in the async library already provides a similar `every`
function:
https://ocaml.org/p/async_unix/v0.15.0/doc/Async_unix/Require_explicit_time_source/Clock/index.html#val-every

Let's delete the hand-crafted `every` function and make `handle_keys`
and `handle_steps` use `Clock_ns.every` instead.

One useful async primitive you might want to use for letting
`Clock_ns.every` know when to stop looping is the `Ivar`. `Ivar` allow
you to create a deferred that you can fill. You can think about them
like boxes that might eventually contain something; you can create an
empty box, wait for the box to be filled, and put something inside the
box.

You can read a bit about `Ivar` here, under the section titled "Ivars
and Upon": https://dev.realworldocaml.org/concurrent-programming.html.

Another important thing to note is that `Clock_ns.every` requires you
to pass a time span representing the frequency that the callback
should run. To create this span, you'll need to use
`Time_ns_unix.Span.create`. You can treat this as convention, but feel
free to ask a TA if you want to know more about the differences between
different time modules.

# Part 2

Next, let's practice using pipes by modifying [handle_keys] to
separate out the logic for reading keys and processing them.

To do this, let's write a new function, `read_keys`. This function will
be the part that listens for keypresses from the user. It will look a
lot like what `handle_keys` looks like now, except that when we do
detect a keypress, we'll write the key to a pipe instead of updating
the game immediately. The return type of `read_keys` should be a `char
Pipe.Reader.t`.

Then, we need to update `handle_keys`. Here, we should call
`read_keys` to generate a pipe of all the keys that are pressed by
the reader and iterate over that pipe. For each key that gets read
from the pipe, we will need to update the game and rerender the
graphics.

This may seem like it's adding complexity to our implementation, but
this separation of logic will come in handy soon.

# Part 3 (optional)

For some additional async practice, you can take a look around the
other parts of the game to see if there is anything that can be
simplified using async primitives. For example, if you implemented
logic to reset and restart your snake game, would async allow you to
write it in a cleaner way?

Feel free to grab a TA to discuss any ideas you have.
